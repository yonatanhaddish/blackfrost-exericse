"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLimiter = exports.RATE_LIMITER_DEFAULT_CONFIG = void 0;
const bottleneck_1 = __importDefault(require("bottleneck"));
// default values are matching https://docs.blockfrost.io/#section/Limits
// burst 500 reqs/50s with 10req/1s cool-off
exports.RATE_LIMITER_DEFAULT_CONFIG = {
    size: 500,
    increaseInterval: 1000,
    increaseAmount: 10,
};
const getLimiter = (config) => {
    const limiter = new bottleneck_1.default({
        reservoir: config.size,
        reservoirIncreaseAmount: config.increaseAmount,
        reservoirIncreaseInterval: config.increaseInterval,
        reservoirIncreaseMaximum: config.size,
    });
    limiter.on('error', function (error) {
        console.error(error);
    });
    return limiter;
};
exports.getLimiter = getLimiter;
